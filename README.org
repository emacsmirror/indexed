* Indexed
An efficient cache of metadata about all your Org files.

Builds fast.  My =M-x indexed-reset=:

#+begin_example
indexed: Analyzed 160616 lines in 10734 entries (3397 with ID)
         in 2394 files in 1.37s (+ 0.16s to build SQLite DB)
#+end_example

This library came from asking myself "what could I move out of [[https://github.com/meedstrom/org-node][org-node]], that'd make sense in core?"  Maybe a proposal for upstream, or at least a PoC.

Many Org plugins now do reinvent the wheel, when it comes to keeping track of some or many files and what may be in them.

Example: org-roam's DB, org-node's hash tables, orgrr's hash tables, ..., and some just re-run grep all the time, which still leads to writing elisp to cross-reference the results with something useful.

And let's not talk about the org-agenda... (Try putting 2000 files into =org-agenda-files=!)  It needs to open each file in real-time to know anything about them, so everyday commands grind to a halt.

** Quick overview

Data will exist after setup akin to this and you wait a second or two.

#+begin_src elisp
(setq indexed-org-dirs '("~/org" "~/Sync/notes"))
(indexed-updater-mode)
(indexed-roam-mode) ;; optional
#+end_src

Two different APIs to access the same data.

- sql
- elisp

Why two?  It's free.  When the data has been gathered anyway, there is no reason to /only/ insert it into a SQLite db, nor /only/ put it in a hash table.

And hash table is nicer for simple lookups, SQL for complex lookups.

For the elisp, see [[https://github.com/meedstrom/indexed?tab=readme-ov-file#appendix-i-api][Appendix I]]. For the SQL, see below.

** A SQLite database, for free

You can create your own database ([[https://github.com/meedstrom/indexed?tab=readme-ov-file#appendix-ii-make-your-own-database][Appendix II]]), but you probably won't need to.  Included are two designs:

1. A drop-in for [[https://github.com/org-roam/org-roam][org-roam's]] =(org-roam-db)=, called =(indexed-roam)=.
2. Our own experimental =(indexed-orgdb)=.
   - Are you a SQL and Org user?  Please write what you think should go in a good DB.  https://github.com/meedstrom/indexed/issues/1

*** Quick start with =indexed-roam=
**** With org-roam installed
To end your dependence on =org-roam-db-sync=, set the following.

It will overwite the "org-roam.db" file. 

#+begin_src elisp
(setq org-roam-db-update-on-save nil)
(setq indexed-roam-db-location org-roam-db-location)
(indexed-roam-mode)
#+end_src

Now, you have a new, all-fake org-roam.db!  Test that it works:

#+begin_src elisp
(org-roam-db-query [:select * :from files])
#+end_src

**** Without org-roam installed
Set the following.

#+begin_src elisp
(setq indexed-roam-db-location "/tmp/indexed-roam.db")
(indexed-roam-mode)
#+end_src

Test that it works:

#+begin_src elisp
(setq my-roam-db (emacsql-sqlite-open indexed-roam-db-location))
(emacsql my-roam-db [:select * :from files])
#+end_src

*** Quick start with =indexed-orgdb=

This DB is a bit different.  There's no file on disk, it's all RAM.  Activate:

#+begin_src elisp
(indexed-orgdb-mode)
#+end_src

Note it probably does *not* work with EmacSQL, just the Emacs 29+ built-in =sqlite-select=.

In practice, you can often translate a statement like

#+begin_src elisp
(org-roam-db-query [:select tag :from tags :where (= id $s1)] id)
#+end_src

to

#+begin_src elisp
(sqlite-select (indexed-orgdb) "select tag from tags where id = ?;" (list id))
#+end_src

or if you like mysterious aliases,

#+begin_src elisp
(indexed-orgdb "select tag from tags where id = ?;" id)
#+end_src

There are several differences between this and org-roam's DB. You can compare, if you if you enable both

#+begin_src elisp
(indexed-roam-mode)
(indexed-orgdb-mode)
#+end_src

and then use command =M-x indexed-list-db-contents=.

** Data only

A design choice: Indexed *only* delivers data.  It could easily ship conveniences like, let's call it a function "indexed-goto":

#+begin_src elisp
(defun indexed-goto (entry)
  (find-file (indexed-file-name entry))
  (goto-char (indexed-pos entry))
#+end_src

but in my experience, that will spiral into dozens of lines over time, to handle a variety of edge cases, and then it will no longer be universally applicable.  Maybe you prefer to handle edge cases different than I do.

So, it is up to you to write your own "goto" function and all else to do with user interaction.

** Appendix I: API

There are three types of objects: /file-data/, /org-entry/ and /org-link/.  Some functions operate on more than one type.

Polymorphic functions
- indexed-pos
- indexed-file-name
- indexed-file-data
- indexed-file-title
- indexed-file-title-or-basename
- indexed-file-mtime

Functions operating on raw file paths
- indexed-entry-near-lnum-in-file
- indexed-entry-near-pos-in-file
- indexed-id-nodes-in
- indexed-entries-in

Functions operating on raw id
- indexed-entry-by-id
- indexed-links-from

Functions operating on raw titles
- indexed-id-node-by-title

Functions operating on FILE-DATA
- indexed-mtime

Functions operating on ORG-LINK
- indexed-dest
- indexed-type
- indexed-heading-above
- indexed-id-nearby
  - (old alias: =indexed-origin=.  Org-roam calls the same thing "source" and org-node calls it "origin", but both terms presume an ID-centric design to everything, and make less sense when you allow for the absence of IDs.)

Functions operating on ENTRY
- indexed-deadline
- indexed-heading-lvl
- indexed-id-links-to
- indexed-olpath
- indexed-olpath-with-self
- indexed-olpath-with-self-with-title
- indexed-olpath-with-title
- indexed-priority
- indexed-properties
- indexed-property
- indexed-property-assert
- indexed-roam-aliases
- indexed-roam-reflinks-to -- needs indexed-roam-mode enabled
- indexed-roam-refs -- needs indexed-roam-mode enabled
- indexed-root-heading-to
- indexed-scheduled
- indexed-tags
- indexed-tags-inherited
- indexed-tags-local
- indexed-todo-state
- indexed-toptitle

Functions without argument (which you can use to iterate over all objects)

- indexed-org-entries
- indexed-org-id-nodes (subset of above)
- indexed-org-links-and-citations
- indexed-org-links (subset of above)
- indexed-org-files

Hooks

- indexed-pre-full-reset-functions
- indexed-post-full-reset-functions
- indexed-record-file-functions
- indexed-record-entry-functions
- indexed-record-link-functions

Hooks used when =indexed-updater-mode= is enabled

- indexed-pre-incremental-update-functions
- indexed-post-incremental-update-functions
- indexed-forget-file-functions
- indexed-forget-entry-functions
- indexed-forget-link-functions

*** Extension: indexed-x.el

A separate file =indexed-x.el= is loaded when you enable =indexed-updater-mode=.

It is separate because =indexed-updater-mode= is not strictly necessary -- it could be replaced by a simple timer that calls =indexed-reset= every 30 seconds, or whatever you deem suitable.

It ships a variety of tools.

**** Programmer tool: Instantly index thing at point

You may want to call the following functions after inserting entries or links in a custom way, if they need to become indexed instantly without waiting for user to save the buffer:

- indexed-x-ensure-entry-at-point-known
- indexed-x-ensure-link-at-point-known

Examples of when those are useful is when you write a command like =org-node-extract-subtree=, or subroutine like =org-node-backlink--add-in-target=.

*** Extension: indexed-roam.el

Enabled by =indexed-roam-mode=.  Explained elsewhere.

** Appendix II: Make your own database
Steps:

1. Read indexed-roam.el as a reference implementation

   - See how it looks up the indexed data it needs.
   - See which things require a =prin1-to-string=.
   - See how arguments are ultimately passed to =sqlite-execute=.

     Alas, this file got a bit hard to read after squeezing for performance, but it can be done simpler. [TODO: write a simple reference impl]

2. Hook your own DB-creator onto =indexed-post-full-reset-functions=, or just on a repeating timer or some suitable hook.

3. Done!

** Appendix III: User stuff

Modes

- indexed-updater-mode
- indexed-roam-mode

Config settings

- indexed-warn-title-collisions
- indexed-seek-link-types
- indexed-org-dirs
- indexed-org-dirs-exclude

Commands

- indexed-list-dead-id-links
- indexed-list-title-collisions
- indexed-list-problems
- indexed-list-entries
- indexed-list-db-contents
- indexed-reset


** Tip: Fully inform org-id
# XXX update the blob link

Never sit through a slow =M-x org-id-update-id-locations= again!

#+begin_src elisp
(add-hook 'indexed-record-entry-functions #'indexed-x-snitch-to-org-id)
#+end_src

This tells org-id about all IDs that Indexed can find under =indexed-org-dirs=.

That's very good, because if you had clicked an ID-link that org-id did not know about, it would react by running =org-id-update-id-locations=, making Emacs appear to hang for as long as a minute.

Never had this problem?  If you came here from org-node or org-roam,  that's because they solve this problem for you.  I did not want to do it in this library for two reasons:

1. packaging hygiene
2. the org-id [[https://github.com/meedstrom/org-node/blob/a889ede01dbcf22668bfe718037619732169245f/org-node.el#L992-1037][Schrodinger's cat bug]]
